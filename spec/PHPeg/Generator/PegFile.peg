namespace PHPeg\Generator;

use PHPeg\Grammar\Tree\ActionNode;
use PHPeg\Grammar\Tree\AndActionNode;
use PHPeg\Grammar\Tree\AndPredicateNode;
use PHPeg\Grammar\Tree\AnyNode;
use PHPeg\Grammar\Tree\CharacterClassNode;
use PHPeg\Grammar\Tree\ChoiceNode;
use PHPeg\Grammar\Tree\CutNode;
use PHPeg\Grammar\Tree\GrammarNode;
use PHPeg\Grammar\Tree\LabelNode;
use PHPeg\Grammar\Tree\LiteralNode;
use PHPeg\Grammar\Tree\MatchedStringNode;
use PHPeg\Grammar\Tree\NotActionNode;
use PHPeg\Grammar\Tree\NotPredicateNode;
use PHPeg\Grammar\Tree\OneOrMoreNode;
use PHPeg\Grammar\Tree\OptionalNode;
use PHPeg\Grammar\Tree\RuleNode;
use PHPeg\Grammar\Tree\RuleReferenceNode;
use PHPeg\Grammar\Tree\SequenceNode;
use PHPeg\Grammar\Tree\ZeroOrMoreNode;

grammar PegFile
{
    start PegFile = (_ namespace:Namespace)? imports:(_ import:Import { return $import; })* _ grammar:Grammar _ {
        if (isset($namespace)) $grammar->setNamespace($namespace);
        $grammar->setImports($imports);
        return $grammar;
    };

    QualifiedIdentifier = $(Identifier ("\\" ^ Identifier)*);
    Namespace = "namespace" ^ _ name:QualifiedIdentifier _ ";" { return $name; };
    Import = "use" ^ _ name:QualifiedIdentifier _ ";"          { return $name; };

    Grammar = "grammar" ^ _ name:Identifier
        (_ "extends" _ base:Identifier)?
        _ "{"
            (_ "start" ^ _ startSymbol:Rule)?
            rules:(_ rule:Rule { return $rule; })*
        _ "}" {
            $rules = array_merge(isset($startSymbol) ? array($startSymbol) : array(), $rules);
            $grammar = new GrammarNode($name, $rules);
            if (isset($base)) $grammar->setBase($base);
            if (isset($startSymbol)) $grammar->setStartSymbol($startSymbol->getIdentifier());
            return $grammar;
        };
    Rule = identifier:Identifier (_ name:String)? _ "=" ^ _ expression:Expression _ ";"
           { return new RuleNode($identifier, isset($name) ? $name : "'$identifier'", $expression); };

    Label = name:Identifier _ ":" ^ _ expression:Predicate                { return new LabelNode($name, $expression); }
        / Predicate;
    Sequence = first:Label rest:(_ next:Label { return $next; })*         { return empty($rest) ? $first : new SequenceNode(array_merge(array($first), $rest)); };
    Code = $([^{}] / "{" Code "}")*;
    Action "expression" = expression:Sequence _ "{" ^ code:Code "}"       { return new ActionNode($expression, trim($code)); }
        / Sequence;
    Choice = first:Action rest:(_ "/" ^ _ next:Action { return $next; })* { return empty($rest) ? $first : new ChoiceNode(array_merge(array($first), $rest)); };
    Expression = Choice;

    ZeroOrMore = expression:Terminal _ "*"        { return new ZeroOrMoreNode($expression); };
    OneOrMore = expression:Terminal _ "+"         { return new OneOrMoreNode($expression); };
    Optional = expression:Terminal _ "?"          { return new OptionalNode($expression); };
    Repetition = ZeroOrMore / OneOrMore / Optional / Terminal;
    AndPredicate = "&" ^ _ expression:Repetition  { return new AndPredicateNode($expression); };
    NotPredicate = "!" ^ _ expression:Repetition  { return new NotPredicateNode($expression); };
    AndAction = "&" _ "{" ^ code:Code "}"         { return new AndActionNode(trim($code)); };
    NotAction = "!" _ "{" ^ code:Code "}"         { return new NotActionNode(trim($code)); };
    MatchedString = "$" ^ _ expression:Repetition { return new MatchedStringNode($expression); };

    Predicate "expression" = AndAction / NotAction / AndPredicate / NotPredicate / MatchedString / Repetition;

    String = $("\"" ^ ([^\\"] / "\\" .)* "\"" / "'" ^ ([^\\'] / "\\" .)* "'");
    Identifier "identifier" = $(!("start" ![A-Za-z0-9_]) [A-Za-z_] [A-Za-z0-9_]*);

    Literal = string:String ci:"i"?                        { return new LiteralNode($string, isset($ci)); };
    Any = "."                                              { return new AnyNode(); };
    Cut = "^"                                              { return new CutNode(); };
    CharacterClass = "[" ^ string:$([^\\\]] / "\\" .)* "]" { return new CharacterClassNode($string); };
    RuleReference = name:Identifier                        { return new RuleReferenceNode($name); };
    SubExpression = "(" ^ _ expression:Expression _ ")"    { return $expression; };
    Terminal = RuleReference / Literal / Any / Cut / CharacterClass / SubExpression;

    _ = (&[ \n\r\t\/] (Whitespace / BlockComment / InlineComment))*;
    Whitespace = [ \n\r\t];
    BlockComment = "/*" ^ (!"*/" .)* "*/";
    InlineComment = "//" ^ [^\r\n]*;
}
