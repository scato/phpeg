grammar PHPeg
{
    start PegFile = _ grammar:Grammar _ { return $grammar; };

    Grammar = "grammar" _ name:Identifier _ "{"
        _ "start" _ start:Rule
        rules:(_ rule:Rule { return $rule; })*
        _ "}" { return new \PHPeg\Grammar\Tree\GrammarNode($name, $start->getName(), array_merge(array($start), $rules)); };
    Rule = name:Identifier _ "=" _ expression:Expression ";" { return new \PHPeg\Grammar\Tree\RuleNode($name, $expression); };

    Label = name:Identifier _ ":" _ expression:Predicate                { return new \PHPeg\Grammar\Tree\LabelNode($name, $expression); }
          / Predicate;
    Sequence = first:Label rest:(_ next:Label { return $next; })*       { return empty($rest) ? $first : new \PHPeg\Grammar\Tree\SequenceNode(array_merge(array($first), $rest)); };
    Code = $([^{}] / "{" Code "}")*;
    Action = expression:Sequence _ "{" code:Code "}"                    { return new \PHPeg\Grammar\Tree\ActionNode($expression, trim($code)); }
           / Sequence;
    Choice = first:Action rest:(_ "/" _ next:Action { return $next; })* { return empty($rest) ? $first : new \PHPeg\Grammar\Tree\ChoiceNode(array_merge(array($first), $rest)); };
    Expression = Choice;

    ZeroOrMore = expression:Terminal _ "*"      { return new \PHPeg\Grammar\Tree\ZeroOrMoreNode($expression); };
    OneOrMore = expression:Terminal _ "+"       { return new \PHPeg\Grammar\Tree\OneOrMoreNode($expression); };
    Optional = expression:Terminal _ "?"        { return new \PHPeg\Grammar\Tree\OptionalNode($expression); };
    Repetition = ZeroOrMore / OneOrMore / Optional / Terminal;
    AndPredicate = "&" _ expression:Repetition  { return new \PHPeg\Grammar\Tree\AndPredicateNode($expression); };
    NotPredicate = "!" _ expression:Repetition  { return new \PHPeg\Grammar\Tree\NotPredicateNode($expression); };
    MatchedString = "$" _ expression:Repetition { return new \PHPeg\Grammar\Tree\MatchedStringNode($expression); };
    Predicate = AndPredicate / NotPredicate / MatchedString / Repetition;

    Literal = "\"" string:$([^\\"] / "\\" .)* "\""          { return new \PHPeg\Grammar\Tree\LiteralNode(stripslashes($string)); };
    Any = "."                                               { return new \PHPeg\Grammar\Tree\AnyNode(); };
    CharacterClass = "[" string:$([^\\\]] / "\\" .)* "]"    { return new \PHPeg\Grammar\Tree\CharacterClassNode($string); };
    Identifier = $([A-Za-z_] [A-Za-z0-9_]*);
    RuleReference = name:Identifier                         { return new \PHPeg\Grammar\Tree\RuleReferenceNode($name); };
    SubExpression = "(" _ expression:Expression _ ")"       { return $expression; };
    Terminal = Literal / Any / CharacterClass / RuleReference / SubExpression;

    _ = [ \n\r\t]* { return null; };
}
